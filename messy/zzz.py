import asyncio
import time
import pytz
import socketio
from bleak import BleakClient, BleakScanner, BleakError
from location import decode_location_data
from global_var import *

sio = socketio.AsyncClient()
time_zone = pytz.timezone('Asia/Ho_Chi_Minh')

TRACKING_ENABLE = False
LAST_SENT_TIME = {}  # L∆∞u th·ªùi gian g·ª≠i g·∫ßn nh·∫•t c·ªßa t·ª´ng tag
INTERVAL = 5
TIMEOUT = 5
DISCONNECTED_TAGS = set()  # Danh s√°ch Tag b·ªã m·∫•t k·∫øt n·ªëi



# NETWORK NODE  CHARACTERISTIC
SERVICE_UUID = "680c21d9-c946-4c1f-9c11-baa1c21329e7"
NAME_UUID = "00002a00-0000-1000-8000-00805f9b34fb"  # Label (GAP service)
OPERATION_MODE_UUID = "3f0afd88-7770-46b0-b5e7-9fc099598964"  # Operation mode UUID
LOCATION_DATA_UUID = "003bbdf2-c634-4b3d-ab56-7ec889b89a37"  # Location Data
LOCATION_DATA_MODE_UUID = "a02b947e-df97-4516-996a-1882521e0ead"  # Location Data Mode


NETWORK_NODE_SERVICE_UUID = "680c21d9-c946-4c1f-9c11-baa1c21329e7"
LABEL_CHAR_UUID = "00002a00-0000-1000-8000-00805f9b34fb"
OPERATION_MODE_CHAR_UUID = "3f0afd88-7770-46b0-b5e7-9fc099598964"
LOCATION_DATA_CHAR_UUID = "003bbdf2-c634-4b3d-ab56-7ec889b89a37"



DEVICE_INFO = "1e63b1ebd4ed-444eaf54-c1e965192501"
NETWORK_ID_UUID = "80f9d8bc-3bff-45bb-a181-2d6a37991208"
# ANCHOR SPECIFIC

LOCATION_PROXY_UUID = "f4a67d7d-379d-4183-9c03-4b6ea5103291"

# TAG SPECIFIC
UPDATE_RATE_UUID = "7bd47f30-5602-4389-b069-8305731308b6"

TAG_MAC = "EB:52:53:F5:D5:90"
TAG_2 = "E9:82:21:9E:C8:8F"
TAG_MAC_LIST= [
  'EB:52:53:F5:D5:90',
  'E9:82:21:9E:C8:8F'
]
# SERVER URL
# SERVER_URL = "http://172.16.2.92:5000"
# SERVER_URL = "http://192.168.137.128:5000"
SERVER_URL = "http://localhost:5000"
MAC_ADDRESS_ANCHOR_LIST = [ 
  'D7:7A:01:92:9B:DB',
  'C8:70:52:60:9F:38',
  'EB:C3:F1:BC:24:DD',
  'E7:E1:0F:DA:2D:82'
]








import struct

def decode_location_data(data):
    try:
        mode = data[0]
        if mode == 0:
            if len(data) <= 13:
                print("Invalid Type 0 data: Expected 13 bytes")
                return None
            return decode_location_mode_0(data)
        elif mode == 1:
            return decode_location_mode_1(data)
        elif mode == 2:
            return decode_location_mode_2(data)
        else:
            print(f"Unknown location mode: {mode}")

    except Exception as e:
        print(f"Error decoding location: {e}")
        return None


# Position Only
def decode_location_mode_0(data):
    result = {}
    # location_mode = data[0]
    # result["Mode:"] = location_mode
    x, y, z, quality_position = struct.unpack("<i i i B", data[1:14])
    result["Position"] = {
        "X": x / 1000,  # Chuy·ªÉn t·ª´ mm sang m
        "Y": y / 1000,
        "Z": z / 1000,
        "Quality Factor": quality_position
    }
    return result

# Distances Only
def decode_location_mode_1(data):
    result = {}
    distances = []
    distance_count = data[0]
    result["Distances count:"] = distance_count
    for i in range(distance_count):
        offset = 1 + i * 7
        node_id, distance, quality = struct.unpack("<H i B", data[offset:offset + 7])
        distances.append({
            "Node ID": node_id,
            "Distance": distance / 1000,  # Chuy·ªÉn t·ª´ mm sang m
            "Quality Factor": quality
        })
    result["Distances"] = distances
    return result

# H√†m gi·∫£i m√£ Location Data Mode 2 (Position + Distances)
def decode_location_mode_2(data):
    result = {}
    mode_0 = decode_location_mode_0(data[:14])
    mode_1 = decode_location_mode_1(data[14:])
    result.update(mode_0)
    result.update(mode_1)
    return result



# data = bytearray(b'\x02\xc3\x02\x00\x00\x1e\x02\x00\x00i\x04\x00\x008\x04\x0f')
# data_1 =  bytearray(b'\x02\xc3\x02\x00\x00\x1e\x02\x00\x00i\x04\x00\x008\x04\x0f\xd4\x0e\t\x00\x00d\x9a\xd2y\x06\x00\x00d\x11\xc5-\x08\x00\x00d\x0e\xc6\xed\x08\x00\x00d')
#
# print_result(decode_location_mode_1(data_1[14:]))


async def safe_emit(event, data):
    if sio.connected:
        await sio.emit(event, data)
    else:
        print(f"‚ùå Kh√¥ng th·ªÉ g·ª≠i '{event}' v√¨ kh√¥ng k·∫øt n·ªëi v·ªõi server!")

async def connect_to_server(max_retries=3):
    global sio
    for attempt in range(max_retries):
        try:
            print(f"üåê ƒêang k·∫øt n·ªëi ƒë·∫øn server (Th·ª≠ l·∫ßn {attempt + 1})...")
            await sio.connect(SERVER_URL)
            print("‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi server!")
            return

        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi server: {e}")
            await asyncio.sleep(TIMEOUT)

    while True:
        try:
            print(f"üîÑ Server v·∫´n ch∆∞a k·∫øt n·ªëi ƒë∆∞·ª£c, th·ª≠ l·∫°i sau {TIMEOUT} gi√¢y...")
            await asyncio.sleep(TIMEOUT)
            await sio.connect(SERVER_URL)
            print("‚úÖ Server ƒë√£ k·∫øt n·ªëi l·∫°i th√†nh c√¥ng!")
            return
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi server: {e}")


async def connect_to_server_2(max_retries=3):
    """K·∫øt n·ªëi ƒë·∫øn server v·ªõi kh·∫£ nƒÉng t·ª± ƒë·ªông th·ª≠ l·∫°i."""
    global sio

    if sio.connected:
        print("‚úÖ Server ƒë√£ k·∫øt n·ªëi, kh√¥ng c·∫ßn th·ª≠ l·∫°i!")
        return

    for attempt in range(max_retries):
        if sio.connected:  # Ki·ªÉm tra l·∫°i tr∆∞·ªõc khi th·ª≠ k·∫øt n·ªëi
            print("‚úÖ Server ƒë√£ k·∫øt n·ªëi, kh√¥ng c·∫ßn th·ª≠ n·ªØa!")
            return
        try:
            print(f"üåê ƒêang k·∫øt n·ªëi ƒë·∫øn server (Th·ª≠ l·∫ßn {attempt + 1})...")
            await sio.connect(SERVER_URL)

            if sio.connected:
                print("‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi server!")
                return  # D·ª´ng v√≤ng l·∫∑p n·∫øu k·∫øt n·ªëi th√†nh c√¥ng

        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi server: {e}")
            await asyncio.sleep(TIMEOUT)  # Ch·ªù tr∆∞·ªõc khi th·ª≠ l·∫°i

    while True:
        if sio.connected:
            print("‚úÖ Server ƒë√£ k·∫øt n·ªëi, kh√¥ng c·∫ßn th·ª≠ l·∫°i!")
            return
        try:
            print(f"üîÑ Server v·∫´n ch∆∞a k·∫øt n·ªëi ƒë∆∞·ª£c, th·ª≠ l·∫°i sau {TIMEOUT} gi√¢y...")
            await asyncio.sleep(TIMEOUT)
            await sio.connect(SERVER_URL)

            if sio.connected:
                print("‚úÖ Server ƒë√£ k·∫øt n·ªëi l·∫°i th√†nh c√¥ng!")
                return

        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi server: {e}")

@sio.event
async def disconnect():
    print("‚ö†Ô∏è M·∫•t k·∫øt n·ªëi v·ªõi server! ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...")
    asyncio.create_task(connect_to_server_2())

@sio.on("start_tracking")
async def start_tracking(data=None):
    """B·∫≠t tracking t·ª´ server."""
    global TRACKING_ENABLE
    tracking_enabled = True
    print("‚úÖ Tracking ƒë√£ b·∫≠t!")


@sio.on("stop_tracking")
async def stop_tracking(data=None):
    """T·∫Øt tracking t·ª´ server."""
    global TRACKING_ENABLE
    tracking_enabled = False
    print("‚ùå Tracking ƒë√£ d·ª´ng!")


async def notification_handler(sender, data, address):
    """X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ BLE notify, ki·ªÉm so√°t t·∫ßn su·∫•t g·ª≠i."""
    global TRACKING_ENABLE, LAST_SENT_TIME, INTERVAL
    decoded_data = decode_location_data(data)
    current_time = time.time()

    if tracking_enabled:
        await safe_emit("tag_data", {"mac": address, "data": decoded_data})
        print(f"Tracking = {tracking_enabled}\nTag {address} g·ª≠i ngay!\nData: {decoded_data} \n")
    else:
        last_sent = last_sent_time.get(address, 0)
        if current_time - last_sent >= INTERVAL:
            await safe_emit("tag_data", {"mac": address, "data": decoded_data})
            last_sent_time[address] = current_time
            print(
                f"Tracing = {tracking_enabled} - Delay: {INTERVAL}s\nTag [{address}] g·ª≠i d·ªØ li·ªáu!\nData: {decoded_data} \n")


async def process_anchor(address):
    """X·ª≠ l√Ω k·∫øt n·ªëi v·ªõi Anchor: Ch·ªâ k·∫øt th√∫c khi g·ª≠i d·ªØ li·ªáu th√†nh c√¥ng."""
    client = BleakClient(address)

    while True:
        try:
            print(f"üîç ƒêang k·∫øt n·ªëi Anchor {address}...")
            await client.connect()
            if not client.is_connected:
                print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi {address}, th·ª≠ l·∫°i sau {TIMEOUT} gi√¢y...")
                await asyncio.sleep(TIMEOUT)
                continue

            print(f"‚úÖ ƒê√£ k·∫øt n·ªëi {address}, ƒë·ªçc d·ªØ li·ªáu...")
            data = await client.read_gatt_char(LOCATION_DATA_UUID)
            operation_mode_data = await client.read_gatt_char(OPERATION_MODE_UUID)

            decoded_data = decode_location_data(data)
            operation_mode_value = int.from_bytes(operation_mode_data[:2], byteorder="big")
            operation_mode_binary = f"{operation_mode_value:016b}"

            print(f"üì° Anchor {address} g·ª≠i d·ªØ li·ªáu: {decoded_data}")
            await safe_emit("anchor_data", {
                "mac": address,
                "data": decoded_data,
                "operation_mode": operation_mode_binary
            })
            # G·ª≠i th√†nh c√¥ng th√¨ k·∫øt th√∫c v√≤ng l·∫∑p, kh√¥ng qu√©t l·∫°i
            break

        except BleakError as e:
            print(f"‚ùå L·ªói BLE {address}: {e}")
            await asyncio.sleep(TIMEOUT)
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh v·ªõi {address}: {e}")
        finally:
            if client.is_connected:
                await client.disconnect()

    print(f"‚úÖ Ho√†n th√†nh x·ª≠ l√Ω Anchor {address}, kh√¥ng qu√©t l·∫°i!")


async def process_tag(address, max_retries=3):
    """X·ª≠ l√Ω k·∫øt n·ªëi v·ªõi Tag v√† t·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i khi m·∫•t k·∫øt n·ªëi."""
    global DISCONNECTED_TAGS
    while True:
        client = BleakClient(address)
        for attempt in range(max_retries):
            try:
                await client.connect()
                if not client.is_connected:
                    print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi {address}, th·ª≠ l·∫ßn {attempt + 1}")
                    await asyncio.sleep(TIMEOUT)
                    continue

                print(f"‚úÖ K·∫øt n·ªëi {address} th√†nh c√¥ng, b·∫Øt ƒë·∫ßu nh·∫≠n d·ªØ li·ªáu...")
                DISCONNECTED_TAGS.discard(address)  # ƒê√°nh d·∫•u l√† ƒë√£ k·∫øt n·ªëi l·∫°i
                # Nh·∫≠n notify t·ª´ Tag
                await client.start_notify(LOCATION_DATA_UUID,
                                          lambda s, d: asyncio.create_task(notification_handler(s, d, address))
                                          )

                while client.is_connected:
                    await asyncio.sleep(1)  # Gi·ªØ k·∫øt n·ªëi

            except BleakError as e:
                print(f"‚ùå L·ªói BLE {address}: {e}")
            except asyncio.TimeoutError:
                print(f"‚ùå Timeout khi k·∫øt n·ªëi {address}")
            except Exception as e:
                print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh v·ªõi {address}: {e}")
            finally:
                if client.is_connected:
                    await client.disconnect()

        # N·∫øu th·ª≠ 3 l·∫ßn v·∫´n l·ªói th√¨ v√†o ch·∫ø ƒë·ªô ch·ªù, qu√©t l·∫°i m·ªói 10s
        print(f"üîÑ Kh√¥ng th·ªÉ k·∫øt n·ªëi {address}, th·ª≠ l·∫°i sau {TIMEOUT}s ...")
        DISCONNECTED_TAGS.add(address)
        await asyncio.sleep(TIMEOUT)


async def main():
    """Ch∆∞∆°ng tr√¨nh ch√≠nh."""
    await connect_to_server_2()

    # T√¨m c√°c thi·∫øt b·ªã BLE
    devices = await BleakScanner.discover(10)
    anchors = [dev.address for dev in devices if dev.address in MAC_ADDRESS_ANCHOR_LIST]
    print(f"Danh s√°ch anchor: {anchors}")

    #
    #
    # X·ª≠ l√Ω t·ª´ng anchor (ch·ªâ ch·∫°y m·ªôt l·∫ßn)
    for anchor in anchors:
        await process_anchor(anchor)

    # anchor_tasks = [asyncio.create_task(process_anchor(anchor)) for anchor in anchors]
    # await asyncio.gather(*anchor_tasks)

    print("Ch·ªù server l·ªánh ƒë·ªÉ x·ª≠ l√Ω Tag...")
    # Kh·ªüi ch·∫°y task cho t·ª´ng Tag
    tasks = [asyncio.create_task(process_tag(tag)) for tag in TAG_MAC_LIST]
    await asyncio.gather(*tasks)

    await sio.disconnect()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError as e:
        print(f"‚ùå L·ªói runtime: {e}")