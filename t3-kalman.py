import asyncio
import time
import pytz
import socketio
from bleak import BleakClient, BleakScanner, BleakError
from location import decode_location_data
from global_var import *


import numpy as np
from filterpy.kalman import KalmanFilter

sio = socketio.AsyncClient()
time_zone = pytz.timezone('Asia/Ho_Chi_Minh')

tracking_enabled = False
last_sent_time = {}  # L∆∞u th·ªùi gian g·ª≠i g·∫ßn nh·∫•t c·ªßa t·ª´ng tag
INTERVAL = 5
TIMEOUT = 5
DISCONNECTED_TAGS = set()  # Danh s√°ch Tag b·ªã m·∫•t k·∫øt n·ªëi


async def safe_emit(event, data):
    if sio.connected:
        await sio.emit(event, data)
    else:
        print(f"‚ùå Kh√¥ng th·ªÉ g·ª≠i '{event}' v√¨ kh√¥ng k·∫øt n·ªëi v·ªõi server!")

async def connect_to_server(max_retries=3):
    global sio
    for attempt in range(max_retries):
        try:
            print(f"üåê ƒêang k·∫øt n·ªëi ƒë·∫øn server (Th·ª≠ l·∫ßn {attempt + 1})...")
            await sio.connect(SERVER_URL)
            print("‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi server!")
            return

        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi server: {e}")
            await asyncio.sleep(TIMEOUT)

    while True:
        try:
            print(f"üîÑ Server v·∫´n ch∆∞a k·∫øt n·ªëi ƒë∆∞·ª£c, th·ª≠ l·∫°i sau {TIMEOUT} gi√¢y...")
            await asyncio.sleep(TIMEOUT)
            await sio.connect(SERVER_URL)
            print("‚úÖ Server ƒë√£ k·∫øt n·ªëi l·∫°i th√†nh c√¥ng!")
            return
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi server: {e}")


async def connect_to_server_2(max_retries=3):
    """K·∫øt n·ªëi ƒë·∫øn server v·ªõi kh·∫£ nƒÉng t·ª± ƒë·ªông th·ª≠ l·∫°i."""
    global sio

    if sio.connected:
        print("‚úÖ Server ƒë√£ k·∫øt n·ªëi, kh√¥ng c·∫ßn th·ª≠ l·∫°i!")
        return

    for attempt in range(max_retries):
        if sio.connected:  # Ki·ªÉm tra l·∫°i tr∆∞·ªõc khi th·ª≠ k·∫øt n·ªëi
            print("‚úÖ Server ƒë√£ k·∫øt n·ªëi, kh√¥ng c·∫ßn th·ª≠ n·ªØa!")
            return
        try:
            print(f"üåê ƒêang k·∫øt n·ªëi ƒë·∫øn server (Th·ª≠ l·∫ßn {attempt + 1})...")
            await sio.connect(SERVER_URL)

            if sio.connected:
                print("‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi server!")
                return  # D·ª´ng v√≤ng l·∫∑p n·∫øu k·∫øt n·ªëi th√†nh c√¥ng

        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi server: {e}")
            await asyncio.sleep(TIMEOUT)  # Ch·ªù tr∆∞·ªõc khi th·ª≠ l·∫°i

    while True:
        if sio.connected:
            print("‚úÖ Server ƒë√£ k·∫øt n·ªëi, kh√¥ng c·∫ßn th·ª≠ l·∫°i!")
            return
        try:
            print(f"üîÑ Server v·∫´n ch∆∞a k·∫øt n·ªëi ƒë∆∞·ª£c, th·ª≠ l·∫°i sau {TIMEOUT} gi√¢y...")
            await asyncio.sleep(TIMEOUT)
            await sio.connect(SERVER_URL)

            if sio.connected:
                print("‚úÖ Server ƒë√£ k·∫øt n·ªëi l·∫°i th√†nh c√¥ng!")
                return

        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi server: {e}")

@sio.event
async def disconnect():
    print("‚ö†Ô∏è M·∫•t k·∫øt n·ªëi v·ªõi server! ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...")
    asyncio.create_task(connect_to_server_2())

@sio.on("start_tracking")
async def start_tracking(data=None):
    """B·∫≠t tracking t·ª´ server."""
    global tracking_enabled
    tracking_enabled = True
    print("Tracking ƒë√£ b·∫≠t!")


@sio.on("stop_tracking")
async def stop_tracking(data=None):
    """T·∫Øt tracking t·ª´ server."""
    global tracking_enabled
    tracking_enabled = False
    print("Tracking ƒë√£ d·ª´ng!")


async def _notification_handler(sender, data, address):
    """X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ BLE notify, ki·ªÉm so√°t t·∫ßn su·∫•t g·ª≠i."""
    global tracking_enabled, last_sent_time, INTERVAL
    decoded_data = decode_location_data(data)
    current_time = time.time()

    if tracking_enabled:
        await safe_emit("tag_data", {"mac": address, "data": decoded_data})
        print(f"Tracking = {tracking_enabled}\nTag {address} g·ª≠i ngay!\nData: {decoded_data} \n")
    else:
        last_sent = last_sent_time.get(address, 0)
        if current_time - last_sent >= INTERVAL:
            await safe_emit("tag_data", {"mac": address, "data": decoded_data})
            last_sent_time[address] = current_time
            print(
                f"Tracing = {tracking_enabled} - Delay: {INTERVAL}s\nTag [{address}] g·ª≠i d·ªØ li·ªáu!\nData: {decoded_data} \n")


# Dictionary l∆∞u Kalman Filter cho t·ª´ng Tag
kalman_filters = {}


def init_kalman():
    """Kh·ªüi t·∫°o Kalman Filter cho m·ªói Tag."""
    kf = KalmanFilter(dim_x=2, dim_z=1)  # Tr·∫°ng th√°i (v·ªã tr√≠, v·∫≠n t·ªëc), ƒëo ch·ªâ c√≥ v·ªã tr√≠
    dt = 0.1  # Kho·∫£ng th·ªùi gian l·∫•y m·∫´u 0.1s
    kf.F = np.array([[1, dt], [0, 1]])  # Ma tr·∫≠n tr·∫°ng th√°i
    kf.H = np.array([[1, 0]])  # Ma tr·∫≠n ƒëo (ch·ªâ ƒëo v·ªã tr√≠)
    kf.P *= 500  # ƒê·ªô kh√¥ng ch·∫Øc ch·∫Øn ban ƒë·∫ßu
    kf.Q = np.array([[0.01, 0], [0, 0.01]])  # Nhi·ªÖu h·ªá th·ªëng
    kf.R = np.array([[4]])  # Nhi·ªÖu ƒëo
    kf.x = np.array([[0], [0]])  # Kh·ªüi t·∫°o tr·∫°ng th√°i (v·ªã tr√≠ = 0, v·∫≠n t·ªëc = 0)
    return kf


async def notification_handler(sender, data, address):
    """X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ BLE notify v√† l·ªçc nhi·ªÖu b·∫±ng Kalman."""
    global tracking_enabled, last_sent_time, INTERVAL, kalman_filters
    decoded_data = decode_location_data(data)
    current_time = time.time()
    position = decoded_data["position"]  # Gi·∫£ s·ª≠ d·ªØ li·ªáu ƒëo c√≥ key "position"

    # Kh·ªüi t·∫°o Kalman Filter n·∫øu Tag ch∆∞a c√≥
    if address not in kalman_filters:
        kalman_filters[address] = init_kalman()
    kf = kalman_filters[address]

    # √Åp d·ª•ng Kalman Filter
    kf.predict()
    kf.update(position)
    filtered_position = kf.x[0, 0]  # L·∫•y v·ªã tr√≠ ƒë√£ l·ªçc
    decoded_data["position"] = filtered_position  # G√°n l·∫°i v√†o d·ªØ li·ªáu

    if tracking_enabled:
        await safe_emit("tag_data", {"mac": address, "data": decoded_data})
        print(f"üì° Tag {address} g·ª≠i ngay! Data: {decoded_data} ")
    else:
        last_sent = last_sent_time.get(address, 0)
        if current_time - last_sent >= INTERVAL:
            await safe_emit("tag_data", {"mac": address, "data": decoded_data})
            last_sent_time[address] = current_time
            print(f"üì° Tag {address} g·ª≠i sau {INTERVAL}s! Data: {decoded_data} ")


async def process_anchor(address):
    """X·ª≠ l√Ω k·∫øt n·ªëi v·ªõi Anchor: Ch·ªâ k·∫øt th√∫c khi g·ª≠i d·ªØ li·ªáu th√†nh c√¥ng."""
    client = BleakClient(address)

    while True:
        try:
            print(f"üîç ƒêang k·∫øt n·ªëi Anchor {address}...")
            await client.connect()
            if not client.is_connected:
                print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi {address}, th·ª≠ l·∫°i sau {TIMEOUT} gi√¢y...")
                await asyncio.sleep(TIMEOUT)
                continue

            print(f"‚úÖ ƒê√£ k·∫øt n·ªëi {address}, ƒë·ªçc d·ªØ li·ªáu...")
            data = await client.read_gatt_char(LOCATION_DATA_UUID)
            operation_mode_data = await client.read_gatt_char(OPERATION_MODE_UUID)

            decoded_data = decode_location_data(data)
            operation_mode_value = int.from_bytes(operation_mode_data[:2], byteorder="big")
            operation_mode_binary = f"{operation_mode_value:016b}"

            print(f"üì° Anchor {address} g·ª≠i d·ªØ li·ªáu: {decoded_data}")
            await safe_emit("anchor_data", {
                "mac": address,
                "data": decoded_data,
                "operation_mode": operation_mode_binary
            })
            # G·ª≠i th√†nh c√¥ng th√¨ k·∫øt th√∫c v√≤ng l·∫∑p, kh√¥ng qu√©t l·∫°i
            break

        except BleakError as e:
            print(f"‚ùå L·ªói BLE {address}: {e}")
            await asyncio.sleep(TIMEOUT)
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh v·ªõi {address}: {e}")
        finally:
            if client.is_connected:
                await client.disconnect()

    print(f"‚úÖ Ho√†n th√†nh x·ª≠ l√Ω Anchor {address}, kh√¥ng qu√©t l·∫°i!")


async def process_tag(address, max_retries=3):
    """X·ª≠ l√Ω k·∫øt n·ªëi v·ªõi Tag v√† t·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i khi m·∫•t k·∫øt n·ªëi."""
    global DISCONNECTED_TAGS
    while True:
        client = BleakClient(address)
        for attempt in range(max_retries):
            try:
                await client.connect()
                if not client.is_connected:
                    print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi {address}, th·ª≠ l·∫ßn {attempt + 1}")
                    await asyncio.sleep(TIMEOUT)
                    continue

                print(f"‚úÖ K·∫øt n·ªëi {address} th√†nh c√¥ng, b·∫Øt ƒë·∫ßu nh·∫≠n d·ªØ li·ªáu...")
                DISCONNECTED_TAGS.discard(address)  # ƒê√°nh d·∫•u l√† ƒë√£ k·∫øt n·ªëi l·∫°i
                # Nh·∫≠n notify t·ª´ Tag
                await client.start_notify(LOCATION_DATA_UUID,
                                          lambda s, d: asyncio.create_task(notification_handler(s, d, address))
                                          )

                while client.is_connected:
                    await asyncio.sleep(1)  # Gi·ªØ k·∫øt n·ªëi

            except BleakError as e:
                print(f"‚ùå L·ªói BLE {address}: {e}")
            except asyncio.TimeoutError:
                print(f"‚ùå Timeout khi k·∫øt n·ªëi {address}")
            except Exception as e:
                print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh v·ªõi {address}: {e}")
            finally:
                if client.is_connected:
                    await client.disconnect()

        # N·∫øu th·ª≠ 3 l·∫ßn v·∫´n l·ªói th√¨ v√†o ch·∫ø ƒë·ªô ch·ªù, qu√©t l·∫°i m·ªói 10s
        print(f"üîÑ Kh√¥ng th·ªÉ k·∫øt n·ªëi {address}, th·ª≠ l·∫°i sau {TIMEOUT}s ...")
        DISCONNECTED_TAGS.add(address)
        await asyncio.sleep(TIMEOUT)


async def main():
    """Ch∆∞∆°ng tr√¨nh ch√≠nh."""
    await connect_to_server_2()

    # # T√¨m c√°c thi·∫øt b·ªã BLE
    # devices = await BleakScanner.discover(10)
    # anchors = [dev.address for dev in devices if dev.address in MAC_ADDRESS_ANCHOR_LIST]
    # print(f"Danh s√°ch anchor: {anchors}")
    #
    #
    #
    # # X·ª≠ l√Ω t·ª´ng anchor (ch·ªâ ch·∫°y m·ªôt l·∫ßn)
    # # for anchor in anchors:
    # #     await process_anchor(anchor)
    #
    # anchor_tasks = [asyncio.create_task(process_anchor(anchor)) for anchor in anchors]
    # await asyncio.gather(*anchor_tasks)

    print("Ch·ªù server l·ªánh ƒë·ªÉ x·ª≠ l√Ω Tag...")
    # Kh·ªüi ch·∫°y task cho t·ª´ng Tag
    tasks = [asyncio.create_task(process_tag(tag)) for tag in TAG_MAC_LIST]
    await asyncio.gather(*tasks)

    await sio.disconnect()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError as e:
        print(f"‚ùå L·ªói runtime: {e}")
