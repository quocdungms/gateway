import asyncio
import time
from xmlrpc.client import Boolean

import pytz
import socketio
from bleak import BleakClient, BleakScanner, BleakError
from location import decode_location_data
from global_var import *

sio = socketio.AsyncClient()
time_zone = pytz.timezone('Asia/Ho_Chi_Minh')

TRACKING_ENABLED = False
LAST_SENT_TIME = {}  # L∆∞u th·ªùi gian g·ª≠i g·∫ßn nh·∫•t c·ªßa t·ª´ng tag
INTERVAL = 5
TIMEOUT = 5
DISCONNECTED_TAGS = set()  # Danh s√°ch Tag b·ªã m·∫•t k·∫øt n·ªëi

queue_location = asyncio.Queue()

async def safe_emit(event, data):
    if sio.connected:
        await sio.emit(event, data)
        return True
    else:
        print(f"‚ùå Kh√¥ng th·ªÉ g·ª≠i '{event}' v√¨ kh√¥ng k·∫øt n·ªëi v·ªõi server!")
        return False

async def connect_to_server():
    global sio
    while True:
        try:
            if sio.connected:
                print("‚úÖ Server k·∫øt n·ªëi l·∫°i th√†nh c√¥ng!")
                return
            if not await sio.connect(SERVER_URL):
                continue
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi server: {e}")
            print(f"üîÑ Server v·∫´n ch∆∞a k·∫øt n·ªëi ƒë∆∞·ª£c, th·ª≠ l·∫°i sau {TIMEOUT} gi√¢y...")
            await asyncio.sleep(TIMEOUT)


@sio.event
async def disconnect():
    print("‚ö†Ô∏è M·∫•t k·∫øt n·ªëi v·ªõi server! ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...")
    asyncio.create_task(connect_to_server())

@sio.on("start_tracking")
async def start_tracking(data=None):
    """B·∫≠t tracking t·ª´ server."""
    global TRACKING_ENABLED
    TRACKING_ENABLED = True
    print("Tracking ƒë√£ b·∫≠t!")


@sio.on("stop_tracking")
async def stop_tracking(data=None):
    """T·∫Øt tracking t·ª´ server."""
    global TRACKING_ENABLED
    TRACKING_ENABLED = False
    print("Tracking ƒë√£ d·ª´ng!")


async def notification_handler(sender, data, address):
    try:
        decoded_data = decode_location_data(data)
        await queue_location.put((address, decoded_data))
        # print(f"üì° ƒê√£ nh·∫≠n notify t·ª´ {address}: {decoded_data}")
    except Exception as e:
        print(f"‚ùå L·ªói trong notification_handler: {e}")


async def send_location_handler():
    global TRACKING_ENABLED, LAST_SENT_TIME, INTERVAL
    while True:  # Lu√¥n ch·∫°y ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu m·ªõi
        address, location = await queue_location.get()  # Ch·ªù d·ªØ li·ªáu m·ªõi
        current_time = time.time()

        if TRACKING_ENABLED:
            if await safe_emit("tag_data", {"mac": address, "data": location}):
                print(f"üì° Tag [{address}] g·ª≠i d·ªØ li·ªáu!\nData: {location}")

        else:
            last_sent = LAST_SENT_TIME.get(address, 0)
            if current_time - last_sent >= INTERVAL:
                if await safe_emit("tag_data", {"mac": address, "data": location}):
                    print(f"üïí Tag [{address}] g·ª≠i d·ªØ li·ªáu (INTERVAL={INTERVAL}s)\nData: {location}")
                LAST_SENT_TIME[address] = current_time
        await asyncio.sleep(0.1)
async def process_anchor(address):
    """X·ª≠ l√Ω k·∫øt n·ªëi v·ªõi Anchor: Ch·ªâ k·∫øt th√∫c khi g·ª≠i d·ªØ li·ªáu th√†nh c√¥ng."""
    client = BleakClient(address)

    while True:
        try:
            print(f"üîç ƒêang k·∫øt n·ªëi Anchor {address}...")
            await client.connect()
            if not client.is_connected:
                print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi {address}, th·ª≠ l·∫°i sau {TIMEOUT} gi√¢y...")
                await asyncio.sleep(TIMEOUT)
                continue

            print(f"‚úÖ ƒê√£ k·∫øt n·ªëi {address}, ƒë·ªçc d·ªØ li·ªáu...")
            data = await client.read_gatt_char(LOCATION_DATA_UUID)
            operation_mode_data = await client.read_gatt_char(OPERATION_MODE_UUID)

            decoded_data = decode_location_data(data)
            operation_mode_value = int.from_bytes(operation_mode_data[:2], byteorder="big")
            operation_mode_binary = f"{operation_mode_value:016b}"

            print(f"üì° Anchor {address} g·ª≠i d·ªØ li·ªáu: {decoded_data}")
            await safe_emit("anchor_data", {
                "mac": address,
                "data": decoded_data,
                "operation_mode": operation_mode_binary
            })
            # G·ª≠i th√†nh c√¥ng th√¨ k·∫øt th√∫c v√≤ng l·∫∑p, kh√¥ng qu√©t l·∫°i
            break

        except BleakError as e:
            print(f"‚ùå L·ªói BLE {address}: {e}")
            await asyncio.sleep(TIMEOUT)
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh v·ªõi {address}: {e}")
        finally:
            if client.is_connected:
                await client.disconnect()

    print(f"‚úÖ Ho√†n th√†nh x·ª≠ l√Ω Anchor {address}, kh√¥ng qu√©t l·∫°i!")


async def process_tag(address, max_retries=3):
    """X·ª≠ l√Ω k·∫øt n·ªëi v·ªõi Tag v√† t·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i khi m·∫•t k·∫øt n·ªëi."""
    global DISCONNECTED_TAGS
    while True:
        client = BleakClient(address)
        for attempt in range(max_retries):
            try:
                await client.connect()
                if not client.is_connected:
                    print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi {address}, th·ª≠ l·∫ßn {attempt + 1}")
                    await asyncio.sleep(TIMEOUT)
                    continue

                print(f"‚úÖ K·∫øt n·ªëi {address} th√†nh c√¥ng, b·∫Øt ƒë·∫ßu nh·∫≠n d·ªØ li·ªáu...")
                DISCONNECTED_TAGS.discard(address)  # ƒê√°nh d·∫•u l√† ƒë√£ k·∫øt n·ªëi l·∫°i
                # Nh·∫≠n notify t·ª´ Tag
                await client.start_notify(LOCATION_DATA_UUID, lambda s, d: asyncio.create_task(notification_handler(s,d,address)))
                print(f"‚úÖ ƒê√£ k√≠ch ho·∫°t notify th√†nh c√¥ng cho {address}!")
                while client.is_connected:
                    await asyncio.sleep(1)  # Gi·ªØ k·∫øt n·ªëi



            except BleakError as e:
                print(f"‚ùå L·ªói BLE {address}: {e}")
            except asyncio.TimeoutError:
                print(f"‚ùå Timeout khi k·∫øt n·ªëi {address}")
            except Exception as e:
                print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh v·ªõi {address}: {e}")
            finally:
                if client.is_connected:
                    await client.disconnect()

        # N·∫øu th·ª≠ 3 l·∫ßn v·∫´n l·ªói th√¨ v√†o ch·∫ø ƒë·ªô ch·ªù, qu√©t l·∫°i m·ªói 10s
        print(f"üîÑ Kh√¥ng th·ªÉ k·∫øt n·ªëi {address}, th·ª≠ l·∫°i sau {TIMEOUT}s ...")
        DISCONNECTED_TAGS.add(address)
        await asyncio.sleep(TIMEOUT)


async def main():
    """Ch∆∞∆°ng tr√¨nh ch√≠nh."""
    await connect_to_server()
    asyncio.create_task(send_location_handler())
    # # T√¨m c√°c thi·∫øt b·ªã BLE
    # devices = await BleakScanner.discover(10)
    # anchors = [dev.address for dev in devices if dev.address in MAC_ADDRESS_ANCHOR_LIST]
    # print(f"Danh s√°ch anchor: {anchors}")
    #
    #

    # X·ª≠ l√Ω t·ª´ng anchor (ch·ªâ ch·∫°y m·ªôt l·∫ßn)
    # for anchor in anchors:
    #     await process_anchor(anchor)
    #
    # anchor_tasks = [asyncio.create_task(process_anchor(anchor)) for anchor in anchors]
    # await asyncio.gather(*anchor_tasks)

    print("Ch·ªù server l·ªánh ƒë·ªÉ x·ª≠ l√Ω Tag...")
    # Kh·ªüi ch·∫°y task cho t·ª´ng Tag
    for tag in TAG_MAC_LIST:
        await asyncio.create_task(process_tag(tag))
    # await asyncio.gather(*tasks)

    await sio.disconnect()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError as e:
        print(f"‚ùå L·ªói runtime: {e}")
