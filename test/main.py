import time
import pytz
import struct
import json
import asyncio
import socketio
from aiohttp.log import client_logger
from bleak import BleakClient, BleakScanner, BleakError
from config import SERVER_URL, LOCATION_DATA_UUID, OPERATION_MODE_UUID, LOCATION_DATA_MODE_UUID, UPDATE_RATE_UUID


sio = socketio.AsyncClient()
time_zone = pytz.timezone('Asia/Ho_Chi_Minh')
command_queue = asyncio.Queue()



TRACKING_ENABLED = False
LAST_SENT_TIME = {}  # L∆∞u th·ªùi gian g·ª≠i g·∫ßn nh·∫•t c·ªßa t·ª´ng tag
INTERVAL = 5
TIMEOUT = 5
DISCONNECTED_TAGS = set()  # Danh s√°ch Tag b·ªã m·∫•t k·∫øt n·ªëi

module_tasks = {}
module_types = {}
file_lock = asyncio.Lock()


# Position Only
def decode_location_mode_0(data):
    result = {}
    # location_mode = data[0]
    # result["Mode:"] = location_mode
    x, y, z, quality_position = struct.unpack("<i i i B", data[1:14])
    result["Position"] = {
        "X": x / 1000,  # Chuy·ªÉn t·ª´ mm sang m
        "Y": y / 1000,
        "Z": z / 1000,
        "Quality Factor": quality_position
    }
    return result

# Distances Only
def decode_location_mode_1(data):
    result = {}
    distances = []
    distance_count = data[0]
    result["Distances count:"] = distance_count
    for i in range(distance_count):
        offset = 1 + i * 7
        node_id, distance, quality = struct.unpack("<H i B", data[offset:offset + 7])
        distances.append({
            "Node ID": node_id,
            "Distance": distance / 1000,  # Chuy·ªÉn t·ª´ mm sang m
            "Quality Factor": quality
        })
    result["Distances"] = distances
    return result

# H√†m gi·∫£i m√£ Location Data Mode 2 (Position + Distances)
def decode_location_mode_2(data):
    result = {}
    mode_0 = decode_location_mode_0(data[:14])
    mode_1 = decode_location_mode_1(data[14:])
    result.update(mode_0)
    result.update(mode_1)
    return result

def decode_location_data(data: bytearray):
    try:
        mode = data[0]
        if mode == 0:
            if len(data) <= 13:
                print("Invalid Type 0 data: Expected 13 bytes")
                return None
            return decode_location_mode_0(data)
        elif mode == 1:
            return decode_location_mode_1(data)
        elif mode == 2:
            return decode_location_mode_2(data)
        else:
            print(f"Unknown location mode: {mode}")

    except Exception as e:
        print(f"Error decoding location: {e}")
        return None


# H√†m load danh s√°ch thi·∫øt b·ªã t·ª´ file JSON
def load_devices_from_json(file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            data = json.load(f)
        anchors = [device for device in data if device["type"] == "anchor"]
        tags = [device for device in data if device["type"] == "tag"]
        for device in data:
            module_types[device["id"]] = device["type"]
        return anchors, tags
    except Exception as e:
        print(f"L·ªói khi ƒë·ªçc file JSON: {e}")
        return [], []

def bytes_array_to_binary(data: bytearray):
    bit_string = ""
    for byte in data:
        bits = bin(byte)[2:].zfill(8)
        bit_string += bits + " "
    return bit_string.strip()

def bits_to_bytes_array(bit_string):
    # ƒê·∫£m b·∫£o chu·ªói bit c√≥ ƒë·ªô d√†i l√† b·ªôi s·ªë c·ªßa 8
    bit_string = bit_string.zfill((len(bit_string) + 7) // 8 * 8)

    # Chuy·ªÉn ƒë·ªïi sang s·ªë nguy√™n
    integer_value = int(bit_string, 2)

    # Chuy·ªÉn th√†nh m·∫£ng byte
    byte_length = len(bit_string) // 8
    return integer_value.to_bytes(byte_length, byteorder='big')


async def safe_emit(event, data):
    if sio.connected:
        await sio.emit(event, data)
    else:
        print(f"‚ùå Kh√¥ng th·ªÉ g·ª≠i '{event}' v√¨ kh√¥ng k·∫øt n·ªëi v·ªõi server!")

async def connect_to_server(max_retries=3):
    global sio
    for attempt in range(max_retries):
        try:
            print(f"üåê ƒêang k·∫øt n·ªëi ƒë·∫øn server (Th·ª≠ l·∫ßn {attempt + 1})...")
            await sio.connect(SERVER_URL)
            print("‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi server!")
            return

        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi server: {e}")
            await asyncio.sleep(TIMEOUT)

    while True:
        try:
            print(f"üîÑ Server v·∫´n ch∆∞a k·∫øt n·ªëi ƒë∆∞·ª£c, th·ª≠ l·∫°i sau {TIMEOUT} gi√¢y...")
            await asyncio.sleep(TIMEOUT)
            await sio.connect(SERVER_URL)
            print("‚úÖ Server ƒë√£ k·∫øt n·ªëi l·∫°i th√†nh c√¥ng!")
            return
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi server: {e}")

async def connect_to_server2(max_retries=3):
    """K·∫øt n·ªëi ƒë·∫øn server v·ªõi kh·∫£ nƒÉng t·ª± ƒë·ªông th·ª≠ l·∫°i."""
    global sio

    if sio.connected:
        print("‚úÖ Server ƒë√£ k·∫øt n·ªëi, kh√¥ng c·∫ßn th·ª≠ l·∫°i!")
        return

    for attempt in range(max_retries):
        if sio.connected:  # Ki·ªÉm tra l·∫°i tr∆∞·ªõc khi th·ª≠ k·∫øt n·ªëi
            print("‚úÖ Server ƒë√£ k·∫øt n·ªëi, kh√¥ng c·∫ßn th·ª≠ n·ªØa!")
            return
        try:
            print(f"üåê ƒêang k·∫øt n·ªëi ƒë·∫øn server (Th·ª≠ l·∫ßn {attempt + 1})...")
            await sio.connect(SERVER_URL)

            if sio.connected:
                print("‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi server!")
                return  # D·ª´ng v√≤ng l·∫∑p n·∫øu k·∫øt n·ªëi th√†nh c√¥ng

        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi server: {e}")
            await asyncio.sleep(TIMEOUT)  # Ch·ªù tr∆∞·ªõc khi th·ª≠ l·∫°i

    while True:
        if sio.connected:
            print("‚úÖ Server ƒë√£ k·∫øt n·ªëi, kh√¥ng c·∫ßn th·ª≠ l·∫°i!")
            return
        try:
            print(f"üîÑ Server v·∫´n ch∆∞a k·∫øt n·ªëi ƒë∆∞·ª£c, th·ª≠ l·∫°i sau {TIMEOUT} gi√¢y...")
            await asyncio.sleep(TIMEOUT)
            await sio.connect(SERVER_URL)

            if sio.connected:
                print("‚úÖ Server ƒë√£ k·∫øt n·ªëi l·∫°i th√†nh c√¥ng!")
                return

        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi server: {e}")

async def connect_to_server3(max_retries=3):
    global sio
    if sio.connected:  # Ki·ªÉm tra n·∫øu ƒë√£ k·∫øt n·ªëi
        print("‚ö° Server ƒë√£ k·∫øt n·ªëi, kh√¥ng c·∫ßn k·∫øt n·ªëi l·∫°i.")
        return

    for attempt in range(max_retries):
        try:
            print(f"üåê ƒêang k·∫øt n·ªëi ƒë·∫øn server (Th·ª≠ l·∫ßn {attempt + 1})...")
            await sio.connect(SERVER_URL)
            print("‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi server!")
            return
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi server: {e}")
            await asyncio.sleep(TIMEOUT)

    while not sio.connected:  # Ch·ªâ th·ª≠ l·∫°i n·∫øu ch∆∞a k·∫øt n·ªëi
        try:
            print(f"üîÑ Server v·∫´n ch∆∞a k·∫øt n·ªëi ƒë∆∞·ª£c, th·ª≠ l·∫°i sau {TIMEOUT} gi√¢y...")
            await asyncio.sleep(TIMEOUT)
            await sio.connect(SERVER_URL)
            print("‚úÖ Server ƒë√£ k·∫øt n·ªëi l·∫°i th√†nh c√¥ng!")
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi server: {e}")

@sio.event
async def disconnect():
    print("‚ö†Ô∏è M·∫•t k·∫øt n·ªëi v·ªõi server! ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...")
    asyncio.create_task(connect_to_server())

@sio.on("start_tracking")
async def start_tracking(data=None):
    """B·∫≠t tracking t·ª´ server."""
    global TRACKING_ENABLED
    TRACKING_ENABLED = True
    print("Tracking ƒë√£ b·∫≠t!")


@sio.on("stop_tracking")
async def stop_tracking(data=None):
    """T·∫Øt tracking t·ª´ server."""
    global TRACKING_ENABLED
    TRACKING_ENABLED = False
    print("Tracking ƒë√£ d·ª´ng!")

@sio.on("server_req")
async def server_req(data):
    command = data.get("command")
    payload = data.get("payload", {})
    mac_address = payload.get("mac")
    data = payload.get("data")
    print(f"Nh·∫≠n request: command {command}, mac {mac_address}, data: {data}")
    if all([command, mac_address,data]) is not None:
        # print(f"Nh·∫≠n request: command {command}, mac {mac_address}, data: {data}")
        await command_queue.put((command, mac_address, data))

def determine_module_type(operation_mode: bytearray):
    if operation_mode[0] == 0x01:
        return "tag"
    return "anchor"

# def bit_string_to_byte_array(bit_string: str) -> bytearray:
#     while len(bit_string) % 8 != 0:
#         bit_string = "0" + bit_string
#     byte_list = [int(bit_string[i:i+8], 2) for i in range(0, len(bit_string), 8)]
#     return bytearray(byte_list)


async def process_command(command, mac, data, max_retries=3):
    if mac not in module_types:
        print(f"Module {mac} kh√¥ng t·ªìn t·∫°i!")
    client = BleakClient(mac)
    for attempt in range(max_retries):
        try:
            # await client.connect()
            if command == "set-operation-mode":
                print("bat dau xy ly set-operation")
                opetation_bytes_array = bits_to_bytes_array(data)
                await client.stop_notify(LOCATION_DATA_UUID)
                await client.write_gatt_char(OPERATION_MODE_UUID, opetation_bytes_array)
                print(f"Set operation mode thanh cong!!!")
                await asyncio.sleep(2)
                operation_mode_data = await client.read_gatt_char(OPERATION_MODE_UUID)
                new_type = determine_module_type(operation_mode_data)
                if new_type != module_types["mac"]:
                    module_types["mac"] = new_type
                    #kiem tra type moi va type cu
                    # Neu chuyen tag thanh anchor va nguoc lai thi dung task dang thuc thi
                    if mac in module_tasks:
                        module_tasks[mac].cancel()

                    if new_type == "tag":
                        module_tasks[mac] = asyncio.create_task(process_tag(mac))
                    elif new_type == "anchor":
                        module_tasks[mac] = asyncio.create_task(process_anchor(mac))
            elif command == "set-location-mode":
                    location_mode = bytearray(data)
                    await client.write_gatt_char(LOCATION_DATA_MODE_UUID, location_mode)
            elif command == "set-anchor-location" and module_types[mac] == "anchor":
                    print("Developing")
            elif command == "set-tag-rate" and module_types[mac] == "tag":
                print("Developing")
                print(f"‚úÖ Th·ª±c hi·ªán {command} cho {mac} th√†nh c√¥ng")
                break
        except BleakError as e:
            print(f"‚ùå L·ªói BLE khi x·ª≠ l√Ω {command} cho {mac} (th·ª≠ l·∫ßn {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(2)
            else:
                print(f"‚ùå Th·∫•t b·∫°i sau {max_retries} l·∫ßn th·ª≠ v·ªõi {mac}")
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi x·ª≠ l√Ω {command} cho {mac}: {e}")
            break
        finally:
            if client.is_connected:
                await client.disconnect()

async def update_modules_json(mac, new_type):
    async with file_lock:
        try:
            with open("modules.json", "r", encoding="utf-8") as file:
                data = json.load(file)
            for device in data:
                if device["id"] == mac:
                    device["type"] = new_type
                    break
            with open("modules.json", "w", encoding="utf-8") as file:
                json.dump(data, file, indent=4)
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t modules.json cho {mac} th√†nh {new_type}")
        except Exception as e:
            print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t modules.json: {e}")

async def command_handler():
    while True:
        command, mac, data = await command_queue.get()
        await process_command(command, mac, data)



# # H√†m t√¨m thi·∫øt b·ªã theo ƒë·ªãa ch·ªâ MAC
# def find_device_by_mac(mac_address):
#     for device in devices:
#         if device["id"] == mac_address:
#             return device  # Tr·∫£ v·ªÅ th√¥ng tin thi·∫øt b·ªã n·∫øu t√¨m th·∫•y
#    return None  # Tr·∫£ v·ªÅ None n·∫øu kh√¥ng t√¨m th·∫•y


def tag_callback(sender, data, address):
    """X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ BLE notify, ki·ªÉm so√°t t·∫ßn su·∫•t g·ª≠i."""
    global TRACKING_ENABLED, LAST_SENT_TIME, INTERVAL
    decoded_data = decode_location_data(data)
    current_time = time.time()


    if TRACKING_ENABLED:
        safe_emit("tag_data", {"mac": address, "data": decoded_data})
        print(f"Tracking = {TRACKING_ENABLED}\nüì® Tag {address} g·ª≠i ngay!\nData: {decoded_data} \n")
    else:
        last_sent = LAST_SENT_TIME.get(address, 0)
        if current_time - last_sent >= INTERVAL:
            safe_emit("tag_data", {"mac": address, "data": decoded_data})
            LAST_SENT_TIME[address] = current_time
            print(
                f"Tracing = {TRACKING_ENABLED} - Delay: {INTERVAL}s\nüì® Tag [{address}] g·ª≠i d·ªØ li·ªáu!\nData: {decoded_data} \n")


async def process_anchor(address):
    """X·ª≠ l√Ω k·∫øt n·ªëi v·ªõi Anchor: Ch·ªâ k·∫øt th√∫c khi g·ª≠i d·ªØ li·ªáu th√†nh c√¥ng."""
    client = BleakClient(address)

    while True:
        try:
            print(f"üîç ƒêang k·∫øt n·ªëi Anchor {address}...")
            await client.connect()
            if not client.is_connected:
                print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi {address}, th·ª≠ l·∫°i sau {TIMEOUT} gi√¢y...")
                await asyncio.sleep(TIMEOUT)
                continue

            print(f"‚úÖ ƒê√£ k·∫øt n·ªëi {address}, ƒë·ªçc d·ªØ li·ªáu...")
            data = await client.read_gatt_char(LOCATION_DATA_UUID)
            operation_mode_binary = await client.read_gatt_char(OPERATION_MODE_UUID)

            decoded_data = decode_location_data(data)
            # operation_mode_value = int.from_bytes(operation_mode_data[:2], byteorder="big")
            # operation_mode_binary = f"{operation_mode_value:016b}"
            operation_mode_binary = bytes_array_to_binary(operation_mode_binary)

            print(f"üì® Anchor {address} g·ª≠i d·ªØ li·ªáu: {decoded_data}")
            await safe_emit("anchor_data", {
                "mac": address,
                "data": decoded_data,
                "operation_mode": operation_mode_binary
            })
            # G·ª≠i th√†nh c√¥ng th√¨ k·∫øt th√∫c v√≤ng l·∫∑p, kh√¥ng qu√©t l·∫°i
            break

        except BleakError as e:
            print(f"‚ùå L·ªói BLE {address}: {e}")
            await asyncio.sleep(TIMEOUT)
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh v·ªõi {address}: {e}")
        finally:
            if client.is_connected:
                await client.disconnect()

    print(f"‚úÖ Ho√†n th√†nh x·ª≠ l√Ω Anchor {address}, kh√¥ng qu√©t l·∫°i!")


async def process_tag(address, max_retries=3):
    """X·ª≠ l√Ω k·∫øt n·ªëi v·ªõi Tag v√† t·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i khi m·∫•t k·∫øt n·ªëi."""
    global DISCONNECTED_TAGS
    while True:
        client = BleakClient(address)
        for attempt in range(max_retries):
            try:
                await client.connect()
                if not client.is_connected:
                    print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi {address}, th·ª≠ l·∫ßn {attempt + 1}")
                    await asyncio.sleep(TIMEOUT)
                    continue

                print(f"‚úÖ K·∫øt n·ªëi {address} th√†nh c√¥ng, b·∫Øt ƒë·∫ßu nh·∫≠n d·ªØ li·ªáu...")
                DISCONNECTED_TAGS.discard(address)  # ƒê√°nh d·∫•u l√† ƒë√£ k·∫øt n·ªëi l·∫°i
                # Nh·∫≠n notify t·ª´ Tag
                await client.start_notify(LOCATION_DATA_UUID,
                                          lambda s, d: asyncio.create_task(tag_callback(s, d, address))
                                          )

                # await client.start_notify(LOCATION_DATA_UUID,
                #                           lambda s, d: tag_callback(s, d, address))
                await asyncio.sleep(5)
                await client.stop_notify(LOCATION_DATA_UUID)


            except BleakError as e:
                print(f"‚ùå L·ªói BLE {address}: {e}")
            except asyncio.TimeoutError:
                print(f"‚ùå Timeout khi k·∫øt n·ªëi {address}")
            except Exception as e:
                print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh v·ªõi {address}: {e}")
            finally:
                if client.is_connected:
                    await client.disconnect()

        # N·∫øu th·ª≠ 3 l·∫ßn v·∫´n l·ªói th√¨ v√†o ch·∫ø ƒë·ªô ch·ªù, qu√©t l·∫°i m·ªói 10s
        print(f"üîÑ Kh√¥ng th·ªÉ k·∫øt n·ªëi {address}, th·ª≠ l·∫°i sau {TIMEOUT}s ...")
        DISCONNECTED_TAGS.add(address)
        await asyncio.sleep(TIMEOUT)


# async def main():
#     """Ch∆∞∆°ng tr√¨nh ch√≠nh."""
#     await connect_to_server()
#
#     # T√¨m c√°c thi·∫øt b·ªã BLE
#     devices = await BleakScanner.discover(10)
#     # anchors = [dev.address for dev in devices if dev.address in MAC_ADDRESS_ANCHOR_LIST]
#
#     tags, anchors = load_devices_from_json("modules.json")
#
#     print(f"Danh s√°ch anchor: {anchors}")
#     print("ƒêang x·ª≠ l√Ω anchor...")
#     for anchor in anchors:
#         await process_anchor(anchor)
#
#     # anchor_tasks = [asyncio.create_task(process_anchor(anchor)) for anchor in anchors]
#     # await asyncio.gather(*anchor_tasks)
#
#     print("ƒêang x·ª≠ l√Ω tag...")
#     # tasks = [asyncio.create_task(process_tag(tag)) for tag in TAG_MAC_LIST]
#     tasks = [asyncio.create_task(process_tag(tag)) for tag in tags]
#     await asyncio.gather(*tasks)
#
#     await sio.disconnect()



async def main():
    await connect_to_server()
    tags, anchors = load_devices_from_json("modules.json")
    for device in tags + anchors:
        mac = device["id"]
        if device["type"] == "tag":
            module_tasks[mac] = asyncio.create_task(process_tag(mac))
        # elif device["type"] == "anchor":
        #     module_tasks[mac] = asyncio.create_task(process_anchor(mac))

    await asyncio.create_task(command_handler())
    # await asyncio.gather(asyncio.create_task(command_handler()))
    await sio.wait()
    await sio.disconnect()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError as e:
        print(f"‚ùå L·ªói runtime: {e}")