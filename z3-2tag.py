import asyncio
import time
import struct
import pytz
import socketio
from bleak import BleakClient, BleakScanner, BleakError
from location import decode_location_data
from global_var import *

# K·∫øt n·ªëi server
sio = socketio.AsyncClient()
time_zone = pytz.timezone('Asia/Ho_Chi_Minh')

tracking_enabled = False
last_sent_time = {}  # L∆∞u th·ªùi gian g·ª≠i g·∫ßn nh·∫•t c·ªßa t·ª´ng tag
cached_data = {}  # L∆∞u d·ªØ li·ªáu m·ªõi nh·∫•t c·ªßa t·ª´ng tag
data_queue = asyncio.Queue()  # H√†ng ƒë·ª£i g·ª≠i d·ªØ li·ªáu


async def safe_emit(event, data):
    """G·ª≠i d·ªØ li·ªáu l√™n server m·ªôt c√°ch an to√†n."""
    if sio.connected:
        await sio.emit(event, data)
    else:
        print(f"Kh√¥ng th·ªÉ g·ª≠i '{event}' v√¨ kh√¥ng k·∫øt n·ªëi v·ªõi server!")


async def connect_to_server():
    """K·∫øt n·ªëi server Socket.IO."""
    try:
        await sio.connect(SERVER_URL)
        print("‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi server")
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi server: {e}")


@sio.on("start_tracking")
async def start_tracking(data=None):
    """B·∫≠t tracking t·ª´ server."""
    global tracking_enabled
    tracking_enabled = True
    print("üöÄ Tracking ƒë√£ b·∫≠t!")


@sio.on("stop_tracking")
async def stop_tracking(data=None):
    """T·∫Øt tracking t·ª´ server."""
    global tracking_enabled
    tracking_enabled = False
    print("üõë Tracking ƒë√£ d·ª´ng!")


async def send_loop():
    """Task li√™n t·ª•c g·ª≠i d·ªØ li·ªáu t·ª´ h√†ng ƒë·ª£i."""
    while True:
        tag_data = await data_queue.get()  # L·∫•y d·ªØ li·ªáu t·ª´ h√†ng ƒë·ª£i
        await safe_emit("tag_data", tag_data)
        data_queue.task_done()  # ƒê√°nh d·∫•u ho√†n th√†nh


def notification_handler(sender, data, address):
    """X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ BLE notify, ki·ªÉm so√°t t·∫ßn su·∫•t g·ª≠i."""
    global last_sent_time, cached_data, tracking_enabled
    decoded_data = decode_location_data(data)
    current_time = time.time()

    if tracking_enabled:
        # Tracking b·∫≠t ‚Üí g·ª≠i ngay l·∫≠p t·ª©c v√†o queue
        asyncio.create_task(data_queue.put({"mac": address, "data": decoded_data}))
        print(f"üì° [Tracking] Tag {address} g·ª≠i ngay: {decoded_data}")
    else:
        # Tracking t·∫Øt ‚Üí ch·ªâ g·ª≠i m·ªói 5 gi√¢y
        cached_data[address] = decoded_data
        if current_time - last_sent_time.get(address, 0) >= 5:
            asyncio.create_task(data_queue.put({"mac": address, "data": cached_data[address]}))
            last_sent_time[address] = current_time
            print(f"‚åõ [Delay] Tag {address} g·ª≠i sau 5s: {decoded_data}")


async def process_device(address, is_tag=False, max_retries=3):
    """K·∫øt n·ªëi BLE v·ªõi Tag ho·∫∑c Anchor."""
    client = BleakClient(address)
    for attempt in range(max_retries):
        try:
            await client.connect()
            if not client.is_connected:
                print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi {address}, th·ª≠ l·∫ßn {attempt + 1}")
                await asyncio.sleep(2)
                continue

            print(f"‚úÖ K·∫øt n·ªëi {address} th√†nh c√¥ng")

            if is_tag:
                print(f"üïπÔ∏è Ch·ªù server cho ph√©p tracking t·ª´ {address}...")
                await client.start_notify(LOCATION_DATA_UUID, lambda s, d: notification_handler(s, d, address))

                while True:
                    await asyncio.sleep(1)  # Gi·ªØ k·∫øt n·ªëi nh∆∞ng kh√¥ng ngh·∫Ωn

            else:  # N·∫øu l√† anchor
                data = await client.read_gatt_char(LOCATION_DATA_UUID)
                operation_mode_data = await client.read_gatt_char(OPERATION_MODE_UUID)
                decoded_data = decode_location_data(data)
                operation_mode_value = int.from_bytes(operation_mode_data[:2], byteorder="big")
                operation_mode_binary = f"{operation_mode_value:016b}"

                print(f"üèóÔ∏è Anchor {address} g·ª≠i d·ªØ li·ªáu: {decoded_data}")
                await safe_emit("anchor_data", {"mac": address, "data": decoded_data, "operation_mode": operation_mode_binary})

            break  # Tho√°t v√≤ng l·∫∑p n·∫øu k·∫øt n·ªëi th√†nh c√¥ng

        except BleakError as e:
            print(f"‚ö†Ô∏è L·ªói BLE {address}: {e}")
            await asyncio.sleep(2)  # ƒê·ª£i tr∆∞·ªõc khi th·ª≠ l·∫°i
        except asyncio.TimeoutError:
            print(f"‚è≥ Timeout khi k·∫øt n·ªëi {address}")
        except Exception as e:
            print(f"üö® L·ªói kh√¥ng x√°c ƒë·ªãnh v·ªõi {address}: {e}")
        finally:
            if client.is_connected:
                await client.disconnect()


async def main():
    """Ch∆∞∆°ng tr√¨nh ch√≠nh."""
    await connect_to_server()
    asyncio.create_task(send_loop())  # Ch·∫°y task g·ª≠i d·ªØ li·ªáu ri√™ng

    # T√¨m c√°c thi·∫øt b·ªã BLE
    devices = await BleakScanner.discover(10)
    anchors = [dev.address for dev in devices if dev.address in MAC_ADDRESS_ANCHOR_LIST]
    print(f"üõ∞Ô∏è Danh s√°ch anchor: {anchors}")

    print("üì° Ch·ªù server l·ªánh ƒë·ªÉ x·ª≠ l√Ω Tag...")

    # Kh·ªüi ch·∫°y task cho t·ª´ng Tag
    tasks = [asyncio.create_task(process_device(tag, is_tag=True)) for tag in TAG_MAC_LIST]

    await asyncio.gather(*tasks)  # ƒê·ª£i t·∫•t c·∫£ task ho√†n th√†nh
    await sio.disconnect()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError as e:
        print(f"‚ùå L·ªói runtime: {e}")
